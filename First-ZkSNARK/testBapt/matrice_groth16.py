import sys;
from py_ecc.bn128 import G1, G2, multiply, add, curve_order, eq, neg, pairing, Z1, Z2
import galois
from functools import reduce
import numpy as np
from operator import add

GF = galois.GF(curve_order)

def evaluate_polynomial_galois(coefs, x, GF):
    result = GF(0)
    for coef in coefs:
        result = result * x + GF(coef)
    return int(result)

def inner_product_polynomials_with_witness(polys, witness):
    mul_ = lambda x, y: x * y
    sum_ = lambda x, y: x + y
    return reduce(sum_, map(mul_, polys, witness))

# x^3+x+5
# Ensemble des varibles = ['1', 'out', 'x', 'v1', 'v2', 'v3']
U=[
    [3648040478639879203707734290876212514758060733402672390616367364429301415937, 21888242871839275222246405745257275088548364400416034343698204186575808495612, 18240202393199396018538671454381062573790303667013361953081836822146507079690, 21888242871839275222246405745257275088548364400416034343698204186575808495612], 
    [0, 0, 0, 0], 
    [14592161914559516814830937163504850059032242933610689562465469457717205663744, 5, 7296080957279758407415468581752425029516121466805344781232734728858602831861, 8], 
    [10944121435919637611123202872628637544274182200208017171849102093287904247809, 21888242871839275222246405745257275088548364400416034343698204186575808495613, 10944121435919637611123202872628637544274182200208017171849102093287904247818, 21888242871839275222246405745257275088548364400416034343698204186575808495611], 
    [10944121435919637611123202872628637544274182200208017171849102093287904247808, 10944121435919637611123202872628637544274182200208017171849102093287904247812, 21888242871839275222246405745257275088548364400416034343698204186575808495610, 4], 
    [18240202393199396018538671454381062573790303667013361953081836822146507079681, 21888242871839275222246405745257275088548364400416034343698204186575808495616, 3648040478639879203707734290876212514758060733402672390616367364429301415938, 21888242871839275222246405745257275088548364400416034343698204186575808495616]]

V=[
    [7296080957279758407415468581752425029516121466805344781232734728858602831872, 10944121435919637611123202872628637544274182200208017171849102093287904247811, 3648040478639879203707734290876212514758060733402672390616367364429301415931, 3], 
    [0, 0, 0, 0], 
    [14592161914559516814830937163504850059032242933610689562465469457717205663745, 10944121435919637611123202872628637544274182200208017171849102093287904247806, 18240202393199396018538671454381062573790303667013361953081836822146507079686, 21888242871839275222246405745257275088548364400416034343698204186575808495615], 
    [0, 0, 0, 0], 
    [0, 0, 0, 0], 
    [0, 0, 0, 0]]

W=[
    [0, 0, 0, 0], 
    [18240202393199396018538671454381062573790303667013361953081836822146507079681, 21888242871839275222246405745257275088548364400416034343698204186575808495616, 3648040478639879203707734290876212514758060733402672390616367364429301415938, 21888242871839275222246405745257275088548364400416034343698204186575808495616], 
    [0, 0, 0, 0], 
    [3648040478639879203707734290876212514758060733402672390616367364429301415936, 10944121435919637611123202872628637544274182200208017171849102093287904247810, 7296080957279758407415468581752425029516121466805344781232734728858602831868, 4], 
    [10944121435919637611123202872628637544274182200208017171849102093287904247809, 21888242871839275222246405745257275088548364400416034343698204186575808495613, 10944121435919637611123202872628637544274182200208017171849102093287904247818, 21888242871839275222246405745257275088548364400416034343698204186575808495611], 
    [10944121435919637611123202872628637544274182200208017171849102093287904247808, 10944121435919637611123202872628637544274182200208017171849102093287904247812, 21888242871839275222246405745257275088548364400416034343698204186575808495610, 4]
]


a=[1, 135, 5, 25, 125, 130]

nb_eq = len(U[0])

#=================================Pour trouver t(x)  ==========================
values = [i for i in range(1, nb_eq+1)] # Car on a 6 colonnes

poly_t = galois.Poly([1], field=GF)  # Start with the polynomial '1' in the given field
for val in values:
    poly_t *= galois.Poly([1, -val], field=GF)
t=[]
for elem in poly_t.coeffs:
    t.append(int(elem))
#==============================================================================


tau=GF(13)

tau_G1=[]
for i in range(0, nb_eq):
    tau_G1.append(multiply(G1, int(tau**i)))

tau_G2=[]
for i in range(0, nb_eq):
    tau_G2.append(multiply(G2, int(tau**i)))

t_tau=evaluate_polynomial_galois(t, tau, GF)

tau_t_G1=[]
for i in range(0, nb_eq):
    tau_t_G1.append(multiply(multiply(G1, t_tau),int(tau**i)))

print("tau_G1=",tau_G1)
print("tau_G2=",tau_G2)
print("tau_t_G1=",tau_t_G1)

alpha=GF(5)
beta=GF(7)
gamma=GF(11)
delta=GF(13)

# alpha_G1=multiply(G1, int(alpha))
# beta_G1=multiply(G1, int(beta))
# beta_G2=multiply(G2, int(beta))
# gamma_G2=multiply(G2, int(gamma))
# delta_G1=multiply(G1, int(delta))
# delta_G2=multiply(G2, int(delta))

U_polys=[]
for elem in U:
    U_polys.append(galois.Poly((elem),field=GF))

V_polys=[]
for elem in V:
    V_polys.append(galois.Poly((elem),field=GF))

W_polys=[]
for elem in W:
    W_polys.append(galois.Poly((elem),field=GF))

witness = np.array(a) % curve_order

Ua = inner_product_polynomials_with_witness(U_polys, witness)
Va = inner_product_polynomials_with_witness(V_polys, witness)
Wa = inner_product_polynomials_with_witness(W_polys, witness)

t_poly=galois.Poly(t,field=GF)

h_quo = (Ua * Va - Wa) // t_poly
h_rem = (Ua * Va - Wa) % t_poly

assert h_rem == 0, "h_rem != 0"

# print(h_quo)
print("reste = ",h_rem)
print("h(x) = ",h_quo)

#Pour etre bien ZK, le prouver va choisir r et s al√©atoirement
r=GF(30)
s=GF(200)
m = len(a)

A = alpha + reduce(add, [a[i] * (U_polys[i](tau)) for i in range(0, m)]) + r * delta
print("A=",A)

B = beta + reduce(add, [a[i] * (V_polys[i](tau)) for i in range(0, m)]) + s * delta
print("B=",B)

C = (reduce(add,[a[i]*(beta * (U_polys[i](tau)) + alpha * (V_polys[i](tau)) + W_polys[i](tau)) for i in range(2, m)]) + h_quo(tau) * t_poly(tau)) / delta + (A * s + B * r - r * s * delta)
print("C=",C)

A_1=multiply(G1,int(A)) 
C_1=multiply(G1,int(C))
B_2=multiply(G2,int(B))

lhs = pairing(B_2, A_1)
print("lhs=",lhs)

D = multiply(G1,int(reduce(add, [ a[i] * (beta * U_polys[i](tau) + alpha * V_polys[i](tau) + W_polys[i](tau)) for i in range(0, 2)]) / gamma))

rhs = pairing(multiply(G2,int(beta)),multiply(G1,int(alpha))) * pairing( multiply(G2,int(gamma)),D)* pairing(multiply(G2,int(delta)),C_1)
print("rhs=",rhs)
print(lhs == rhs)
